%plot_ebtel.m

%Will Barnes
%4 April 2013

clear all
close all

%This file plots data generated by the Enthalpy Based Thermal Evolution of
%Loops (EBTEL) model. The model is written in C and data is output to a
%text file.

%Decide which case we are plotting first
eb_case = 1;
if eb_case==1
    loop_length = 75;
    total_time = 10000;
    h_nano = 1.5e-3;
    t_pulse_half = 250;
    T0 = 0.85e+6;
    n0 = 0.36e+8;
elseif eb_case==2
    loop_length = 25;
    total_time = 6000;
    h_nano = 1e-2;
    t_pulse_half = 100;
    T0 = 0.78e+6;
    n0 = 1.85e+8;
elseif eb_case==3
    loop_length = 25;
    total_time = 2000;
    h_nano = 2;
    t_pulse_half = 100;
    T0 = 2.1e+6;
    n0 = 18.5e+8;
else
    loop_length = 25;
    total_time = 6000;
    h_nano = 1e-2;
    t_pulse_half = 100;
    T0 = 1.6e+6;
    n0 = 9.2e+8;
end

%Start our model with the appropriate inputs
%First set each parameter appropriately
%total_time = 6000;
param(1) = total_time;
tau = 1;
param(2) = tau;
heating_shape = 1;
param(3) = heating_shape;
%loop_length = 75;
param(4) = loop_length;
usage=2;
param(5) = usage;
rtv=1;
param(6) = rtv;
dem_old = 0;
param(7) = dem_old;
classical = 1;
param(8) = classical;
solver=0;
param(9) = solver;
mode=0;
param(10) = mode;
%h_nano = 1e-2;
param(11) = h_nano;
%t_pulse_half = 100;
param(12) = t_pulse_half;
%T0 = 1.3e+6;
param(13) = T0;
%n0 = 9.2e+8;
param(14) = n0;

%Print the param vector to a file
fileID = fopen('ebtel_parameters.txt','w');
fprintf(fileID,'%d\n',param);
fclose(fileID);

%Start the model now that we have set our inputs appropriately

%Utilize the EBTEL makefile
%To clean up the object files and executable, run make clean in the command
%line
unix('make')

%Compute the executables
tic
unix('./ebtel')
toc

%Change to the data directory to plot the file
cd('data')

%Load the data file
file_string = ['L' num2str(loop_length) 'u' num2str(usage) 'h' num2str(heating_shape) 's' num2str(solver)];
ebtel_array = load(['ebteldat' file_string '.txt']);

time = ebtel_array(:,1);
if solver==2
    index=find(time(2:end)==0);
    index=index(1);
else
    index = length(time);
end

time = time(1:index,1);

T = ebtel_array(1:index,2);

n = ebtel_array(1:index,3);

P = ebtel_array(1:index,4);

ta = ebtel_array(1:index,6);

na = ebtel_array(1:index,7);

heat = ebtel_array(1:index,end-1);

r3 = ebtel_array(1:index,end);

%Print necessary values to the screen
[maxval,index] = max(T);
fprintf('T_max = %g at t(Tmax) = %g\n',maxval/1e+6,time(index));
[maxval,index] = max(n);
fprintf('n_max = %g at t(nmax) = %g\n',maxval/1e+9,time(index));
[maxval,index] = max(P);
fprintf('p_max = %g at t(Tmax) = %g\n',maxval,time(index));

current_dir = pwd;
cd('/Users/willbarnes/Documents/Rice/Research/EBTEL_IDL/data')

%Load the appropriate IDL data file for the right case
%idl_varname = ['IDL_case' num2str(eb_case) '.txt'];
idl_varname = 'ebtelIDLoutput.txt';
eb_idl = load(idl_varname);

cd(current_dir)
cd('..')

%Make all necessary variables from IDL data
timeidl = eb_idl(:,1);
heatidl = eb_idl(:,2);
Tidl = eb_idl(:,3);
nidl = eb_idl(:,4);
Pidl = eb_idl(:,5);
vidl = eb_idl(:,6);
taidl = eb_idl(:,7);
naidl = eb_idl(:,8);
paidl = eb_idl(:,9);
r3idl = eb_idl(:,10);

%figure(gcf+1)

%Plot the heating versus time to make sure the profile is correct

[n_max,j_max] = max(n);
[n_max_idl,j_max_idl] = max(nidl);
T_max_n = T(j_max);
T_max_nidl = Tidl(j_max_idl);


%Compute differences between idl and c models
dP = abs(max(P) - max(Pidl));
dn = abs(max(n) - max(nidl));
dT = abs(max(T) - max(Tidl));


%% Plotting

%Set the size of the figures
height = 2.0; % width/golden ratio
width = 0.5;
scale = 1500; %scale the plots appropriately; adjust as needed

figure(1)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(time,heat,'LineWidth',2)
plot(timeidl,heatidl,'--r','LineWidth',2)
xlabel('$t$~(s)','interpreter','latex')
ylabel('$h$ (erg~cm$^{-3}$~s$^{-1}$)','interpreter','latex')
xlim([0 2*t_pulse_half])

figure(2)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(time,T/10^6,'LineWidth',2)
plot(timeidl,Tidl/10^6,'--r','LineWidth',2)
xlabel('$t$~(s)','interpreter','latex')
ylabel('$T$~(MK)','interpreter','latex')
hleg = legend('C','IDL');
set(hleg,'Location','Best','FontSize',14);
xlim([0 timeidl(end)])

%fn = ['temp_c_' num2str(eb_case) 's_' num2str(solver) 'h_' num2str(heating_shape)];
%print(gcf,'-depsc',fn)

figure(3)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(time,P,'LineWidth',2)
plot(timeidl,Pidl,'--r','LineWidth',2)
xlabel('$t$~(s)','interpreter','latex')
ylabel('$P$~(dyne~cm$^{-2}$)','interpreter','latex')
ylim([min(P) max(P)+0.10*max(P)])
xlim([0 timeidl(end)])

% fn = ['press_c_' num2str(eb_case) 's_' num2str(solver) 'h_' num2str(heating_shape)];
% print(gcf,'-depsc',fn)

figure(4)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(time,n/10^8,'LineWidth',2)
plot(timeidl,nidl/10^8,'--r','LineWidth',2)
xlabel('$t$~(s)','interpreter','latex')
ylabel('$n/10^8$~(cm$^{-3}$)','interpreter','latex')
ylim([min(n)/10^8 (max(n)+0.10*max(n))/10^8])
xlim([0 timeidl(end)])

% fn = ['ndens_c_' num2str(eb_case) 's_' num2str(solver) 'h_' num2str(heating_shape)];
% print(gcf,'-depsc',fn)

figure(5)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(time,na/10^8,'LineWidth',2)
plot(timeidl,naidl/10^8,'--r','LineWidth',2)
xlabel('$t~(s)$','interpreter','latex')
ylabel('$n_{apex}/10^8$~(cm$^{-3}$)','interpreter','latex')
ylim([min(na)/10^8 max(na)/10^8])
xlim([0 timeidl(end)])

% fn = ['ndensa_c_' num2str(eb_case) 's_' num2str(solver) 'h_' num2str(heating_shape)];
% print(gcf,'-depsc',fn)

figure(6)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(T/T_max_n,n/n_max,'LineWidth',2)
plot(Tidl/T_max_nidl,nidl/n_max_idl,'--r','LineWidth',2)
xlabel('$T/T_{max}$','interpreter','latex')
ylabel('$n/n_{max}$','interpreter','latex')
xlim([0.2 2.2])
ylim([0.2 1.4])

figure(7)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
plot(time,r3,'LineWidth',2)
plot(timeidl,r3idl,'--r','LineWidth',2)
xlabel('$t$ (s)','interpreter','latex')
ylabel('$c_1$','interpreter','latex')

%Plot differences between C and IDL solutions normalized to their
%respective maximum values
figure(8)
box('on')
set(gcf,'Position',[0 0 scale*width scale*height])
set(gca,'FontSize',18,'FontName','Arial')
hold on
maxdiffT = max(abs(T - Tidl));
plot(time,abs(T-Tidl)/maxdiffT,'k','LineWidth',2)
maxdiffn = max(abs(n - nidl));
plot(time,abs(n - nidl)/maxdiffn,'r','LineWidth',2)
maxdiffna = max(abs(na - naidl));
plot(time,abs(na - naidl)/maxdiffna,'b','LineWidth',2)
maxdiffP = max(abs(P - Pidl));
plot(time,abs(P - Pidl)/maxdiffP,'c','LineWidth',2)
xlabel('$t$, (s)','interpreter','latex')
ylabel('$\Delta$(C-IDL)','interpreter','latex')
hleg = legend('$\Delta(T)$','$\Delta(n)$','$\Delta(n_a)$','$\Delta(P)$');
set(hleg,'FontSize',14,'Location','Best','interpreter','latex')
text(1/2*time(end),0.9,['$\Delta(T)_{max}$ = ' num2str(maxdiffT)],...
    'interpreter','latex','FontSize',14)
text(1/2*time(end),0.9,['$\Delta(n)_{max}$ = ' num2str(maxdiffn)],...
    'interpreter','latex','FontSize',14)
text(1/2*time(end),0.9,'$\Delta(n_a)_{max}$ = ' num2str(maxdiffna) ...
    '$\Delta(P)_{max}$ = ' num2str(maxdiffP)],'interpreter','latex');

% %Additional T plot using data from EBTEL C and IDL
% %First do some basic calculations for two component plasma
% k_b = 1.38e-16;
% mp = 1.67e-24;
% n_he_n_p = 0.075;   %He/p abundance.
% z_avg = (1 + 2*n_he_n_p)/(1 + n_he_n_p); %Include Helium
% %z_avg = 1.; For Hydrad comparison.
% kb_fact = 0.5*(1.+1./z_avg);
% k_b = k_b*kb_fact; %Modify equation of state for non-e-p plasma
% m_fact = (1 + n_he_n_p*4.)/(2 + 3.*n_he_n_p); %Include Helium
% %m_fact = (1 + n_he_n_p*4.)/2.; For Hydrad comparison
% mp = mp*m_fact*(1 + z_avg)/z_avg; %Average ion mass
% 
% TtestC = P./(2*k_b.*n);
% TtestIDL = Pidl./(2*k_b.*nidl);
% figure(9)
% hold on
% plot(time,TtestC,'LineWidth',2)
% plot(timeidl,TtestIDL,'--r','LineWidth',2)
% xlabel('t')
% ylabel('T')

%cd(c_dir)

%Plot DEM if option 1 or 4 is turned on
if usage == 1 || usage == 4
    
    %Load the DEM data file
    cd('data')
    ebteldem_array = load(['ebteldemdat' file_string '.txt']);
    cd('..')
    
    %Make the necessary vectors
    logtdem = ebteldem_array(:,1);
    log10meandem_tr = ebteldem_array(:,2);
    log10meandem_cor = ebteldem_array(:,3);
    log10meandem_tot = ebteldem_array(:,4);
    
    current_dir = pwd;
    cd('/Users/willbarnes/Documents/Rice/Research/EBTEL_IDL/data')
    
    %Load the IDL data 
    %idl_dem_varname = ['IDL_DEM_case' num2str(eb_case) '.txt'];
    idl_dem_varname = 'ebtelIDLoutput_DEM.txt';
    
    eb_idl_dem = load(idl_dem_varname);
    
    cd(current_dir)
    
    %Make the vectors
    dem_tr_idl = log10(eb_idl_dem(:,1));
    dem_cor_idl = log10(eb_idl_dem(:,2));
    logtdem_idl = eb_idl_dem(:,3);
    tot_idl = log10(eb_idl_dem(:,1) + eb_idl_dem(:,2));
    
    figure(gcf+1)
    box('on')
    set(gcf,'Position',[0 0 scale*width scale*height])
    set(gca,'FontSize',18,'FontName','Arial')
    hold on
    plot(logtdem,log10meandem_tr,'b')
    plot(logtdem,log10meandem_cor,'r')
    plot(logtdem_idl,dem_tr_idl,'--b')
    plot(logtdem_idl,dem_cor_idl,'--r')
    plot(logtdem,log10meandem_tot,'g')
    plot(logtdem_idl,tot_idl,'--g')
    hold off
    axis([5.5 7.5 18 22])
    title(['DEM, Case ' num2str(eb_case)])
    xlabel('log($T$) (K)','interpreter','latex')
    ylabel('log(DEM) (cm$^{-5}$~K$^{-1}$)','interpreter','latex')
    hleg=legend('TR','Corona','TR, IDL','Corona, IDL','Total','Total, IDL');
    set(hleg,'Location','Best','FontSize',14)
    
%     figure(gcf+1)
%     plot(logtdem,logtdem + log10meandem_tot)
%     axis([5.5 7.0 24 28])
end

